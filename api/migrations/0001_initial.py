# Generated by Django 4.1.1 on 2023-06-15 20:27

import django.core.validators
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='ComplexIon',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('oxidation', models.CharField(max_length=2, verbose_name='Oxidation')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='CovalentSubstance',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('properties', models.CharField(choices=[('acidic', 'acidic'), ('basic', 'basic'), ('amphoteric', 'amphoteric'), ('neutral', 'neutral')], max_length=10, verbose_name='Properties')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Element',
            fields=[
                ('atomic_number', models.SmallIntegerField(primary_key=True, serialize=False, unique=True, verbose_name='Atomic Number')),
                ('symbol', models.CharField(max_length=2, unique=True, verbose_name='Symbol')),
                ('type', models.CharField(choices=[('Metal', 'Metal'), ('Nonmetal', 'Nonmetal')], max_length=8, verbose_name='Metal / Nonmetal')),
                ('family', models.CharField(choices=[('Alkali', 'Alkali'), ('Alkaline earth', 'Alkaline earth'), ('Transition', 'Transition'), ('Post-transition', 'Post-transition'), ('Metalloid', 'Metalloid'), ('Other Nonmetals', 'Other Nonmetals'), ('Halogen', 'Halogen'), ('Noble gas', 'Noble gas'), ('Lanthanide', 'Lanthanide'), ('Actinide', 'Actinide')], max_length=15, verbose_name='Family')),
                ('name', models.CharField(max_length=16, unique=True, verbose_name='Name')),
                ('group', models.CharField(max_length=2, verbose_name='Group')),
                ('period', models.CharField(max_length=1, verbose_name='Period')),
                ('mass', models.DecimalField(decimal_places=3, max_digits=6, verbose_name='Mass')),
                ('oxidations', models.CharField(max_length=24, validators=[django.core.validators.int_list_validator], verbose_name='Oxidations')),
            ],
        ),
        migrations.CreateModel(
            name='SimpleIon',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('oxidation', models.CharField(max_length=2, verbose_name='Oxidation')),
                ('element', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.element', verbose_name='Element')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='IonicSubstance',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('properties', models.CharField(choices=[('acidic', 'acidic'), ('basic', 'basic'), ('amphoteric', 'amphoteric'), ('neutral', 'neutral')], max_length=10, verbose_name='Properties')),
                ('complex_ions', models.ManyToManyField(to='api.complexion', verbose_name='Complex Ions')),
                ('simple_ions', models.ManyToManyField(to='api.simpleion', verbose_name='Simple Ions')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Equation',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('conditions', models.CharField(max_length=16, verbose_name='Conditions')),
                ('covalent_products', models.ManyToManyField(related_name='covalent_products', to='api.covalentsubstance', verbose_name='Complex Products')),
                ('covalent_reactives', models.ManyToManyField(related_name='covalent_reactives', to='api.covalentsubstance', verbose_name='Complex Reactives')),
                ('ionic_products', models.ManyToManyField(related_name='ionic_products', to='api.ionicsubstance', verbose_name='Ionic Products')),
                ('ionic_reactives', models.ManyToManyField(related_name='ionic_reactives', to='api.ionicsubstance', verbose_name='Ionic Reactives')),
            ],
        ),
        migrations.CreateModel(
            name='ElementCountInIon',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('count', models.CharField(max_length=1, verbose_name='Count')),
                ('valency', models.CharField(max_length=1, verbose_name='Valency')),
                ('complex_ion', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.complexion')),
                ('element', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.element')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='ElementCountInCovalentSubstance',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('count', models.CharField(max_length=1, verbose_name='Count')),
                ('valency', models.CharField(max_length=1, verbose_name='Valency')),
                ('element', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.element')),
                ('substance', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.covalentsubstance')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.AddField(
            model_name='covalentsubstance',
            name='elements',
            field=models.ManyToManyField(through='api.ElementCountInCovalentSubstance', to='api.element', verbose_name='Elements'),
        ),
        migrations.AddField(
            model_name='complexion',
            name='elements',
            field=models.ManyToManyField(through='api.ElementCountInIon', to='api.element', verbose_name='Elements'),
        ),
    ]
